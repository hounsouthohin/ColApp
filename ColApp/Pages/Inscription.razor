@page "/Inscription"
@using Microsoft.AspNetCore.Components.Authorization
@using Services
@using Authentication
@inject ServiceInscription ServiceInscription
@inject AuthenticationStateProvider AuthStateProvider
@inject UserAccountService UserAccountService
@inject NavigationManager navManager
@inject ILogger<Inscription> Logger



<EditForm Model="@ServiceInscription" OnSubmit="FormSubmitted" FormName="Inscription">
    <div class="container py-5">
        <div class="row justify-content-center">
            <div class="col-sm-6 col-md-4">
                <!-- Formulaire d'Inscription -->
                <div class="card shadow-lg rounded p-4">
                    <h2 class="text-center text-primary mb-4">Inscription</h2>

                    <!-- Nom input -->
                    <div class="form-outline mb-4">
                        <label for="Nom" class="form-label">Nom</label>
                        <InputText id="Nom" class="form-control form-control-lg" @bind-Value="@ServiceInscription.Nom" placeholder="Entrez votre nom" required />
                    </div>

                    <!-- Prenom input -->
                    <div class="form-outline mb-4">
                        <label for="Prenom" class="form-label">Prénom</label>
                        <InputText id="Prenom" class="form-control form-control-lg" @bind-Value="@ServiceInscription.Prenom" placeholder="Entrez votre prénom" required />
                    </div>

                    
                    <!-- Birthday input --> 
                    <div class="form-outline mb-4">
                        <label for="DateNaissance" class="form-label">Date de Naissance</label>
                        <InputDate id="DateNaissance" class="form-control form-control-lg"
                                   @bind-Value="@ServiceInscription.Date_naissance"
                                   placeholder="Date de naissance"
                                   required />
                    </div>
                    

                    <!-- Courriel input -->
                    <div class="form-outline mb-4">
                        <label for="Courriel" class="form-label">Courriel</label>
                        <InputText id="Courriel" type="email" class="form-control form-control-lg" @bind-Value="@ServiceInscription.Courriel" placeholder="Entrez votre courriel" required />
                    </div>

                    <!-- Mot de passe input -->
                    <div class="form-outline mb-4">
                        <label for="MDP" class="form-label">Mot de passe</label>
                        <InputText id="MDP" type="password" class="form-control form-control-lg" @bind-Value="@ServiceInscription.MDP" placeholder="Créez un mot de passe" required />
                    </div>

                    <!-- Submit button -->
                    <div class="d-grid">
                        <button type="submit" class="btn btn-primary btn-lg">S'inscrire</button>
                    </div>

                    <!-- Divider -->
                    <hr class="my-4" />

                    <!-- Login link -->
                    <p class="text-center text-muted mb-0">Vous avez déjà un compte ? <a href="Connexion" class="text-primary">Se connecter</a></p>

                    <!-- Error message if email already used -->
                    @if (Utiliser)
                    {
                        <div class="alert alert-danger mt-3" role="alert">
                            <p>Le courriel est déjà utilisé.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    //Prevoir une case adequoite pour la date de naissance
    bool Utiliser = false;



    public async void FormSubmitted(EditContext context)
    {
        Utiliser = ServiceInscription.VerifierCourriel(ServiceInscription.Courriel);
        if (Utiliser == false)
        {
            //Inscription
            await ServiceInscription.InsererNouveauCompte(ServiceInscription.Nom, ServiceInscription.Prenom,ServiceInscription.Date_naissance, ServiceInscription.Courriel, ServiceInscription.MDP);
            //Connexion
            var user = UserAccountService.GetByUserMail(ServiceInscription.Courriel);
            var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new UserSession
                {
                    Prenom = user.Prenom,
                    Courriel = user.Courriel,
                    Role = user.Role
                });
            
            navManager.NavigateTo("/", true);
        }
    }
}
