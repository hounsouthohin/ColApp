@page "/Inscription"
@using Microsoft.AspNetCore.Components.Authorization
@using Services
@using Authentication
@inject ServiceInscription ServiceInscription
@inject AuthenticationStateProvider AuthStateProvider
@inject UserAccountService UserAccountService
@inject NavigationManager navManager
@inject ILogger<Inscription> Logger



<EditForm Model="@ServiceInscription" OnValidSubmit="FormSubmitted" FormName="Inscription">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container py-5">
        <div class="row justify-content-center">
            <div class="col-sm-6 col-md-4">
                <div class="card shadow-lg rounded p-4">
                    <h2 class="text-center text-primary mb-4">Inscription</h2>

                    <!-- Nom -->
                    <div class="form-outline mb-4">
                        <label for="Nom" class="form-label">Nom</label>
                        <InputText id="Nom" class="form-control form-control-lg" @bind-Value="@ServiceInscription.Nom" placeholder="Entrez votre nom" />
                        <ValidationMessage For="@(() => ServiceInscription.Nom)" />
                    </div>

                    <!-- Prénom -->
                    <div class="form-outline mb-4">
                        <label for="Prenom" class="form-label">Prénom</label>
                        <InputText id="Prenom" class="form-control form-control-lg" @bind-Value="@ServiceInscription.Prenom" placeholder="Entrez votre prénom" />
                        <ValidationMessage For="@(() => ServiceInscription.Prenom)" />
                    </div>

                    <!-- Date de Naissance -->
                    <div class="form-outline mb-4">
                        <label for="DateNaissance" class="form-label">Date de Naissance</label>
                        <InputDate id="DateNaissance" class="form-control form-control-lg" @bind-Value="@ServiceInscription.Date_naissance" />
                        <ValidationMessage For="@(() => ServiceInscription.Date_naissance)" />
                    </div>

                    <!-- Courriel -->
                    <div class="form-outline mb-4">
                        <label for="Courriel" class="form-label">Courriel</label>
                        <InputText id="Courriel" type="email" class="form-control form-control-lg" @bind-Value="@ServiceInscription.Courriel" placeholder="Entrez votre courriel" />
                        <ValidationMessage For="@(() => ServiceInscription.Courriel)" />
                    </div>

                    <!-- Mot de Passe -->
                    <div class="form-outline mb-4">
                        <label for="MDP" class="form-label">Mot de Passe</label>
                        <InputText id="MDP" type="password" class="form-control form-control-lg" @bind-Value="@ServiceInscription.MDP" placeholder="Créez un mot de passe" />
                        <ValidationMessage For="@(() => ServiceInscription.MDP)" />
                    </div>

                    <!-- Bouton -->
                    <div class="d-grid">
                        <button type="submit" class="btn btn-primary btn-lg">S'inscrire</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>


@code {
    //Prevoir une case adequoite pour la date de naissance
    bool Utiliser = false;
    // Verification du format du mot de passe cote serveur
    private bool ValidatePassword(string password)
    {
        var regex = new System.Text.RegularExpressions.Regex(@"^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&#]{6,}$");
        return regex.IsMatch(password);
    }

    public async void FormSubmitted(EditContext context)
    {
        Utiliser = ServiceInscription.VerifierCourriel(ServiceInscription.Courriel);
        if (Utiliser == false)
        {
            //Inscription si le mot de passe respecte certains criteres
            if(ValidatePassword(ServiceInscription.MDP)){
                await ServiceInscription.InsererNouveauCompte(ServiceInscription.Nom, ServiceInscription.Prenom, ServiceInscription.Date_naissance, ServiceInscription.Courriel, ServiceInscription.MDP);
                //Connexion
                var user = await UserAccountService.GetByUserMail(ServiceInscription.Courriel);
                var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
                await customAuthStateProvider.UpdateAuthenticationState(new UserSession
                    {
                        Prenom = user.Prenom,
                        Courriel = user.Courriel,
                        Role = user.Role
                    });

                navManager.NavigateTo("/", true);
            }
            
            
        }
    }
}
