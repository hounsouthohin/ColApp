@page "/Connexion"
@inject IJSRuntime JS
@using ColApp.Data
@using ColApp.Models
@using ColApp.Partials
@using ColApp.Authentication
@using ColApp.Services
@using Microsoft.Data.SqlClient
@using Microsoft.EntityFrameworkCore
@using System.Data.SqlClient
@inject UserAccountService userAccountService
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@inject ServiceConnexion servConnexion

<EditForm Model="@user" OnValidSubmit="SoumettreAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container py-5">
        <div class="row justify-content-center">
            <div class="col-sm-6 col-md-4">
                <!-- Formulaire de Connexion -->
                <div class="card shadow-lg rounded p-4">
                    <h2 class="text-center text-primary mb-4">Connexion</h2>

                    <!-- Email input -->
                    <div class="form-outline mb-4">
                        <label for="email" class="form-label">Courriel</label>
                        <InputText type="email" id="email" class="form-control form-control-lg" @bind-Value="user.Courriel" placeholder="Entrez votre courriel" />
                        <ValidationMessage For="@(() => user.Courriel)" />
                    </div>

                    <!-- Mot de passe input -->
                    <div class="form-outline mb-4">
                        <label for="password" class="form-label">Mot de passe</label>
                        <InputText type="password" id="password" class="form-control form-control-lg" @bind-Value="user.MotDePasse" placeholder="Entrez votre mot de passe" />
                        <ValidationMessage For="@(() => user.MotDePasse)" />
                    </div>

                    <!-- Row for checkbox and link -->
                    <div class="row mb-4">
                        <div class="col d-flex align-items-center">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="rememberMe" @bind="rememberMe" />
                                <label class="form-check-label" for="rememberMe">Se souvenir de moi</label>
                            </div>
                        </div>
                        <div class="col text-end">
                            <a href="forgotPassword" class="text-muted">Mot de passe oublié ?</a>
                        </div>
                    </div>

                    <!-- Submit button -->
                    <div class="d-grid">
                        <button type="submit" class="btn btn-primary btn-lg">Se connecter</button>
                    </div>

                    <!-- Divider -->
                    <hr class="my-4" />

                    <!-- Social login buttons -->
                    <div class="d-grid">
                        <button type="button" class="btn btn-outline-danger btn-lg" @onclick="ConnexionAvecGoogle">
                            <i class="bi bi-google"></i> Se connecter avec Google
                        </button>
                    </div>

                    <!-- Divider -->
                    <hr class="my-4" />

                    <!-- Register link -->
                    <p class="text-center text-muted mb-0">Pas encore de compte ? <a href="Inscription" class="text-primary">S'inscrire</a></p>
                </div>
            </div>
        </div>
    </div>
</EditForm>


@code {
    private User? user = new User();
    int no;
    public bool isAuthenticated;
    private bool rememberMe;


    //CONNEXION VIA GOOGLE 
    private void ConnexionAvecGoogle()
    {
        // Redirection vers la route correcte définie dans AuthController
        var returnUrl = navManager.BaseUri;
        navManager.NavigateTo($"/auth/signin-google?returnUrl={returnUrl}", forceLoad: true);
    }


    public async Task SoumettreAsync()     
    {
        int result = await servConnexion.VerifierConnexionAsync(user.Courriel, user.MotDePasse);

        if (result == -1)
        {
            await JS.InvokeVoidAsync("alert", "Connexion échouée : courriel ou mot de passe incorrect."); 
            return;
        }
        else if (result == -2)
        {
            await JS.InvokeVoidAsync("alert", "Compte temporairement bloqué. Veuillez réessayer plus tard.");
            return;
        }
        //Si le compte est inactif
        else if (result == -3)
        {
            await JS.InvokeVoidAsync("alert", "Compte non actif!. Veuillez vérifier votre boîte mail pour l'activation du compte!");
            return;
        }

        // Récupérer les informations utilisateur
        var userAccount = await userAccountService.GetByUserMail(user.Courriel);

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                Courriel = userAccount.Courriel,
                Role = userAccount.Role,
                Prenom = userAccount.Prenom
            }, rememberMe);

        navManager.NavigateTo("/", true); // Redirection après connexion
    }




    // Redirection améliorée
    public async Task Redirection()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        var authState = await customAuthStateProvider.GetAuthenticationStateAsync();

        // Vérifiez si l'utilisateur est authentifié
        isAuthenticated = authState.User.Identity.IsAuthenticated;

        if (isAuthenticated)
        {
            // Redirigez l'utilisateur connecté vers la page principale
            navManager.NavigateTo("/", true);        
        }

    }




    

    protected override async Task OnInitializedAsync()
    {
        await Redirection();
    }

}

